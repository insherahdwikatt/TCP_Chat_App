/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Net1Part2_Chatting;


import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author USER
 */
public class ServerFrame extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public ServerFrame() {
        initComponents();
        textPaneArea.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        start = new javax.swing.JButton();
        tcpPort = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPaneArea = new javax.swing.JTextPane();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        status = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        usname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        uspass = new javax.swing.JTextField();
        addbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TCP Server");

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        start.setBackground(new java.awt.Color(204, 255, 255));
        start.setFont(new java.awt.Font("Gill Sans MT", 1, 18)); // NOI18N
        start.setForeground(new java.awt.Color(51, 51, 51));
        start.setText("Start Listening");
        start.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(204, 204, 204)));
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });
        jPanel1.add(start, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 60, 220, 36));

        tcpPort.setBackground(new java.awt.Color(204, 255, 255));
        tcpPort.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        tcpPort.setForeground(new java.awt.Color(51, 51, 51));
        tcpPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tcpPort.setText("8000");
        tcpPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tcpPortActionPerformed(evt);
            }
        });
        jPanel1.add(tcpPort, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 60, 50, 36));

        jLabel1.setFont(new java.awt.Font("Gill Sans MT", 1, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Port :");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, 52, 40));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        textPaneArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(163, 163, 155), 6));
        textPaneArea.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(textPaneArea);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 330, 271));

        jComboBox1.setEditable(true);
        jComboBox1.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loopback Pseudo-Interface 1: 127.0.0.1", " ", " " }));
        jComboBox1.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 51, 51)));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, 410, -1));

        userList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(163, 163, 155), 6));
        userList.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jScrollPane2.setViewportView(userList);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 160, 218, 360));

        status.setBackground(new java.awt.Color(255, 255, 255));
        status.setFont(new java.awt.Font("Gill Sans MT", 0, 16)); // NOI18N
        status.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        status.setText("the State here");
        jPanel1.add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 480, 340, 34));

        jLabel11.setFont(new java.awt.Font("Gill Sans MT", 2, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Status :");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, 57, 34));

        jLabel2.setFont(new java.awt.Font("Gill Sans MT", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("           Online Users");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 110, 220, 60));

        jLabel4.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        jLabel4.setText("UserName:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        usname.setToolTipText("");
        usname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usnameActionPerformed(evt);
            }
        });
        jPanel1.add(usname, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 155, -1));

        jLabel5.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        jLabel5.setText("Password:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 71, -1));
        jPanel1.add(uspass, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 155, -1));

        addbutton.setBackground(new java.awt.Color(204, 255, 255));
        addbutton.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        addbutton.setForeground(new java.awt.Color(51, 51, 51));
        addbutton.setText("Add ");
        addbutton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(204, 204, 204)));
        addbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbuttonActionPerformed(evt);
            }
        });
        jPanel1.add(addbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 155, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tcpPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tcpPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tcpPortActionPerformed
private LocalDateTime sessionStartTime;
private Duration lastSessionDuration;

    private ServerSocket socket;
    private HashMap clientsHash = new HashMap();
    boolean t=false;
    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // TODO add your handling code here:
        int portNumber = 0000;
        boolean isNumbers = false;
        
        try {
            if (!tcpPort.getText().isEmpty()) {
                portNumber = Integer.parseInt(tcpPort.getText());
                isNumbers = true;
                if (isNumbers) {
                    socket = new ServerSocket(portNumber);
                    StyledDocument doc = textPaneArea.getStyledDocument();
                    Style style = textPaneArea.addStyle("", null);
                    StyleConstants.setForeground(style, Color.BLUE);
                    StyleConstants.setBackground(style, Color.white);
                    String s1 = "Start Listening at port: " + portNumber + "\n";
                    doc.insertString(doc.getLength(), s1, style);
                    new ClientAccept(socket).start();
                    status.setText("Address: "+InetAddress.getByName("localhost").getHostAddress() +", port: "+portNumber);
                }
            } else {
                JOptionPane.showMessageDialog(null, "pleace enter a port number in 'port number' field.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "pleace enter only a numbers in 'port number' field.");
            isNumbers = false;
        } catch (IOException | BadLocationException ex) {
            JOptionPane.showMessageDialog(null, "The port number is used");
             //               Logger.getLogger(ClientAccept.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_startActionPerformed

    private void usnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usnameActionPerformed

    private void addbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbuttonActionPerformed
 
    String username = usname.getText().trim().toLowerCase();
    String password = uspass.getText().trim();

    if (username.isEmpty() || password.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Username and password cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    File file = new File("accounts.txt");
    boolean nameExists = false;

    try (Scanner scanner = new Scanner(file)) {
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            if (!line.trim().isEmpty()) {
                String[] account = line.split(" ", 2);
                if (account[0].equalsIgnoreCase(username)) {
                    nameExists = true;
                    break;
                }
            }
        }

        if (nameExists) {
            JOptionPane.showMessageDialog(this, "The entered username already exists. Please enter a different one.", "Warning", JOptionPane.WARNING_MESSAGE);
                usname.setText("");
                uspass.setText("");
        } else {
            try (FileWriter fw = new FileWriter(file, true); BufferedWriter writer = new BufferedWriter(fw)) {
                if (file.length() > 0) {
                    writer.newLine();
                }
                writer.write(username + " " + password);
                JOptionPane.showMessageDialog(this, "User added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

                usname.setText("");
                uspass.setText("");
            }
        }
    } catch (FileNotFoundException e) {
        JOptionPane.showMessageDialog(this, "The accounts file was not found.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "An error occurred while writing to the accounts file.", "Error", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_addbuttonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private class ClientAccept extends Thread {

        private ServerSocket socket;

        public ClientAccept(ServerSocket socket) {
            this.socket = socket;

        }

        public void run() {
            while (true) {
                try {
                    Socket clientSocket = socket.accept();
                    String username = new DataInputStream(clientSocket.getInputStream()).readUTF();
                    DataOutputStream dataOutOfClient = new DataOutputStream(clientSocket.getOutputStream());
                    if (clientsHash.containsKey(username)) {
                        dataOutOfClient.writeUTF("founded");
                    } else {
                        clientsHash.put(username, clientSocket);
                        addTextToArea(username 
                                , true);
                        dataOutOfClient.writeUTF("accept");
                        new endToEndList().start();
                        new ReadMessage(clientSocket, username).start();
                    }

                } catch (IOException ex) {
                    Logger.getLogger(ClientAccept.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BadLocationException ex) {
                    Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }

    }
    class ReadMessage extends Thread {

        Socket s;
        String ID;

        ReadMessage(Socket s, String username) {
            this.s = s;
            this.ID = username;

        }

        public void run() {

            while (!clientsHash.isEmpty() && clientsHash.containsKey(ID)) {
                try {
                    String in = new DataInputStream(s.getInputStream()).readUTF();
                    if (in.contains("logout")) {
                       
                        new DataOutputStream(((Socket) clientsHash.get(ID)).getOutputStream()).writeUTF("logout");////////
                        
                        clientsHash.remove(ID);
                        addTextToArea(ID, false);
                        new endToEndList().start();

                    }
                } catch (IOException | BadLocationException ex) {
                    clientsHash.remove(ID);
                    try {
                        addTextToArea(ID, false);
                    } catch (BadLocationException ex1) {
                        Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                    new endToEndList().start();
                    ex.printStackTrace();

                }
            }
        }
    }

    private class endToEndList extends Thread {

        DefaultListModel dlm;

        public endToEndList() {
            dlm = new DefaultListModel();
            userList.setModel(dlm);
        }

        public void run() {
            try {

                String s = new String();

                Set k = clientsHash.keySet();
                Iterator itr = k.iterator();
                dlm.clear();
                while (itr.hasNext()) {
                    String key = (String) itr.next();
                    s += key + "," + String.valueOf(((Socket) clientsHash.get(key)).getPort()) + ","
                            + ((Socket) clientsHash.get(key)).getInetAddress().getHostAddress() + "&?";
                    String ele = ((Socket) clientsHash.get(key)).getInetAddress().getHostAddress() + ","
                            + String.valueOf(((Socket) clientsHash.get(key)).getPort());
                    dlm.addElement(ele);
                }
                if (s.length() != 0) {
                    s = s.substring(0, s.length() - 2);
                }
                itr = k.iterator();
                while (itr.hasNext()) {
                    String key = (String) itr.next();
                    try {
                        new DataOutputStream(((Socket) clientsHash.get(key)).getOutputStream()).writeUTF("add to list" + s);

                    } catch (IOException ex) {

                        clientsHash.remove(key);
                        addTextToArea(key, false);

                    }
                }
            } catch (BadLocationException ex) {

            }
        }
    }

    public void addTextToArea(String username, boolean color) throws BadLocationException {
        if (color) {
            //in log in
            StyledDocument doc = textPaneArea.getStyledDocument();
            Style style = textPaneArea.addStyle("", null);
            StyleConstants.setForeground(style, Color.BLUE);
            StyleConstants.setBackground(style, Color.white);
            String s1 = username + " login" + "\n";
            doc.insertString(doc.getLength(), s1, style);
        } else {
            //in log out
            StyledDocument doc = textPaneArea.getStyledDocument();
            Style style = textPaneArea.addStyle("", null);
            StyleConstants.setForeground(style, Color.RED);
            StyleConstants.setBackground(style, Color.white);
            String s1 = username + " logout" + "\n";
            doc.insertString(doc.getLength(), s1, style);

        }

    }
    
    private boolean validateLogin(String usernameInput, String passwordInput) {
    // Replace with your actual login validation logic
    return usernameInput.equals("admin") && passwordInput.equals("admin123");
}
    






    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbutton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton start;
    private javax.swing.JLabel status;
    private javax.swing.JTextField tcpPort;
    private javax.swing.JTextPane textPaneArea;
    private javax.swing.JList<String> userList;
    private javax.swing.JTextField usname;
    private javax.swing.JTextField uspass;
    // End of variables declaration//GEN-END:variables

}
